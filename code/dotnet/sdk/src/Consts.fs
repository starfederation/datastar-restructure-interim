// This file will be regenerated by tsbuild
namespace StarFederation.Datastar

open System

type ServerSentEventType = | Fragment | Signal | Remove | Redirect | Console

type FragmentMergeMode = | Default | Morph | Inner | Outer | Prepend | Append | Before | After | UpsertAttributes

type ConsoleMode =
    | Assert | Clear | Count | CountReset | Debug | Dir | Dirxml | Error
    | Group | GroupCollapsed | GroupEnd | Info | Log | Table | Time | TimeEnd
    | TimeLog | Trace | Warn

module Consts =

    let [<Literal>] Version = "1.0.0-beta.1"
    let [<Literal>] VersionClientByteSize = 43972
    let [<Literal>] VersionClientByteSizeGzip = 15021
    let [<Literal>] VersionClientByteSizeGzipHuman = "15 KiB"

    let DefaultSettleTime = TimeSpan.FromMilliseconds 300
    let DefaultSseSendRetry = TimeSpan.FromMilliseconds 1000
    let [<Literal>] datastarQueryKey = "datastar"
    let [<Literal>] DefaultUseViewTransition = false
    let [<Literal>] DefaultOnlyIfMissing = false

    module FragmentMergeMode =
        let toString (this:FragmentMergeMode) =
            match this with
            | Default -> "morph"
            | Morph -> "morph"
            | Inner -> "inner"
            | Outer -> "outer"
            | Prepend -> "prepend"
            | Append -> "append"
            | Before -> "before"
            | After -> "after"
            | UpsertAttributes -> "upsertAttributes"

    module ServerSentEventType =
        let toString this =
            match this with
            | Fragment -> "datastar-fragment"
            | Signal -> "datastar-signal"
            | Remove -> "datastar-remove"
            | Redirect -> "datastar-redirect"
            | Console -> "datastar-console"

    module ConsoleMode =
        let toString (this:ConsoleMode) =
            match this with
            | Assert -> "assert"
            | Clear -> "clear"
            | Count -> "count"
            | CountReset -> "countReset"
            | Debug -> "debug"
            | Dir -> "dir"
            | Dirxml -> "dirxml"
            | Error -> "error"
            | Group -> "group"
            | GroupCollapsed -> "groupCollapsed"
            | GroupEnd -> "groupEnd"
            | Info -> "info"
            | Log -> "log"
            | Table -> "table"
            | Time -> "time"
            | TimeEnd -> "timeEnd"
            | TimeLog -> "timeLog"
            | Trace -> "trace"
            | Warn -> "warn"

    let [<Literal>] dataSelector = "selector"
    let [<Literal>] dataMerge = "merge"
    let [<Literal>] dataSettleDuration = "settleDuration"
    let [<Literal>] dataFragment = "fragment"
    let [<Literal>] dataUseViewTransition = "useViewTransition"
    let [<Literal>] dataStore = "store"
    let [<Literal>] dataOnlyIfMissing = "onlyIfMissing"
    let [<Literal>] dataUrl = "url"

