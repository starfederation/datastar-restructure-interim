{%- func dotnetConsts(data *ConstTemplateData) -%}
// {%s data.DoNotEdit %}

namespace StarFederation.Datastar

open System

{%- for _, enum := range data.Enums -%}
type {%s enum.Name.Pascal %} =
{% for _, entry := range enum.Values %}/// {%s entry.Description %}
| {%s entry.Name.Pascal %}
{% endfor %}
{% endfor %}
module Consts =
    let [<Literal>] DatastarKey               = "{%s data.DatastarKey %}"
    let [<Literal>] Version                   = "{%s data.Version %}"
    let [<Literal>] VersionClientByteSize     = {%d data.VersionClientByteSize %}
    let [<Literal>] VersionClientByteSizeGzip = {%d data.VersionClientByteSizeGzip %}

    /// Default: TimeSpan.FromMilliseconds {%d durationToMs(data.DefaultSettleDuration) %}
    let DefaultSettleDuration = TimeSpan.FromMilliseconds {%d durationToMs(data.DefaultSettleDuration) %}
    /// Default: TimeSpan.FromMilliseconds {%d durationToMs(data.DefaultSSERetryDuration) %}
    let DefaultSSERetryDuration = TimeSpan.FromMilliseconds {%d durationToMs(data.DefaultSSERetryDuration) %}
    {%- for _, enum := range data.Enums -%}{%- if enum.DefaultIndex > -1 -%}
    /// Default: {%s enum.Default.Value %} - {%s enum.Default.Description %}
    let Default{%s enum.Name.Pascal %} = {%s enum.Default.Name.Pascal %}{% endif %}{% endfor %}

    let [<Literal>] DefaultUseViewTransitions = {%v data.DefaultUseViewTransitions %}
    let [<Literal>] DefaultOnlyIfMissing = {%v data.DefaultOnlyIfMissing %}

    {%- for _, literal := range data.DatalineLiterals -%}
    let [<Literal>] DatastarDataline{%s literal.Pascal %} = "{%s literal.Camel %}"
    {%- endfor -%}

{%- for _, enum := range data.Enums -%}
    module {%s enum.Name.Pascal %} =
        let toString this =
            match this with
                {%- for _, entry := range enum.Values -%}
                | {%s enum.Name.Pascal %}.{%s entry.Name.Pascal %} -> "{%s entry.Value %}"
                {%- endfor -%}

{%- endfor -%}
{%- endfunc -%}
