package tsbuild

import (
	"time"

	"github.com/delaneyj/toolbelt"
)

type EnumValueDefinition struct {
	Name        toolbelt.CasedString
	Value       string
	Description string
}

type EnumDefinition struct {
	Name         toolbelt.CasedString
	Values       []*EnumValueDefinition
	DefaultIndex int
	Default      *EnumValueDefinition
}

type DefaultDuration struct {
	Name     toolbelt.CasedString
	Duration time.Duration
}

type DefaultBool struct {
	Name  toolbelt.CasedString
	Value bool
}

type DefaultString struct {
	Name  toolbelt.CasedString
	Value string
}

type ConstTemplateData struct {
	DoNotEdit                 string
	Version                   string
	VersionClientByteSize     int
	VersionClientByteSizeGzip int
	DatastarKey               string
	DatalineLiterals          []toolbelt.CasedString
	DefaultBools              []*DefaultBool
	DefaultDurations          []*DefaultDuration
	DefaultStrings            []*DefaultString
	Enums                     []*EnumDefinition
}

var ConstsData = &ConstTemplateData{
	DoNotEdit:   "This is auto-generated by Datastar. DO NOT EDIT.",
	DatastarKey: "datastar",
	DefaultBools: []*DefaultBool{
		{
			Name:  toolbelt.ToCasedString("useViewTransitions"),
			Value: false,
		},
		{
			Name:  toolbelt.ToCasedString("onlyIfMissing"),
			Value: false,
		},
		{
			Name:  toolbelt.ToCasedString("autoRemoveScript"),
			Value: true,
		},
		{
			Name:  toolbelt.ToCasedString("customEventCancelable"),
			Value: true,
		},
		{
			Name:  toolbelt.ToCasedString("customEventComposed"),
			Value: true,
		},
		{
			Name:  toolbelt.ToCasedString("customEventBubbles"),
			Value: true,
		},
	},
	DefaultDurations: []*DefaultDuration{
		{
			Name:     toolbelt.ToCasedString("settleDuration"),
			Duration: 300 * time.Millisecond,
		},
		{
			Name:     toolbelt.ToCasedString("sseRetryDuration"),
			Duration: 1 * time.Second,
		},
	},
	DefaultStrings: []*DefaultString{
		{
			Name:  toolbelt.ToCasedString("customEventSelector"),
			Value: "document",
		},
		{
			Name:  toolbelt.ToCasedString("customEventDetailJson"),
			Value: "{}",
		},
	},
	DatalineLiterals: []toolbelt.CasedString{
		toolbelt.ToCasedString("selector"),
		toolbelt.ToCasedString("mergeMode"),
		toolbelt.ToCasedString("settleDuration"),
		toolbelt.ToCasedString("fragment"),
		toolbelt.ToCasedString("useViewTransition"),
		toolbelt.ToCasedString("store"),
		toolbelt.ToCasedString("onlyIfMissing"),
		toolbelt.ToCasedString("url"),
		toolbelt.ToCasedString("paths"),
		toolbelt.ToCasedString("script"),
		toolbelt.ToCasedString("autoRemoveScript"),
		toolbelt.ToCasedString("eventName"),
		toolbelt.ToCasedString("cancelable"),
		toolbelt.ToCasedString("composed"),
		toolbelt.ToCasedString("bubbles"),
		toolbelt.ToCasedString("detailJSON"),
	},
	Enums: []*EnumDefinition{
		{
			Name:         toolbelt.ToCasedString("FragmentMergeMode"),
			DefaultIndex: 0,
			Values: []*EnumValueDefinition{
				{
					Value:       "morph",
					Description: "Morphs the fragment into the existing element using idiomorph.",
				},
				{
					Value:       "inner",
					Description: "Replaces the inner HTML of the existing element.",
				},
				{
					Value:       "outer",
					Description: "Replaces the outer HTML of the existing element.",
				},
				{
					Value:       "prepend",
					Description: "Prepends the fragment to the existing element.",
				},
				{
					Value:       "append",
					Description: "Appends the fragment to the existing element.",
				},
				{
					Value:       "before",
					Description: "Inserts the fragment before the existing element.",
				},
				{
					Value:       "after",
					Description: "Inserts the fragment after the existing element.",
				},
				{
					Value:       "upsertAttributes",
					Description: "Upserts the attributes of the existing element.",
				},
			},
		},

		{
			Name:         toolbelt.ToCasedString("EventType"),
			DefaultIndex: -1,
			Values: []*EnumValueDefinition{
				{
					Name:        toolbelt.ToCasedString("MergeFragments"),
					Value:       "datastar-merge-fragments",
					Description: "An event dealing with HTML fragments.",
				},
				{
					Name:        toolbelt.ToCasedString("MergeStore"),
					Value:       "datastar-merge-store",
					Description: "An event dealing with fine grain signals.",
				},
				{
					Name:        toolbelt.ToCasedString("RemoveFragments"),
					Value:       "datastar-remove-fragments",
					Description: "An event dealing with removing elements from the DOM",
				},
				{
					Name:        toolbelt.ToCasedString("RemoveFromStore"),
					Value:       "datastar-remove-from-store",
					Description: "An event dealing with removing signals from the store.",
				},
				{
					Name:        toolbelt.ToCasedString("Redirect"),
					Value:       "datastar-redirect",
					Description: "An event dealing with redirecting the browser.",
				},
				{
					Name:        toolbelt.ToCasedString("ExecuteJs"),
					Value:       "datastar-execute-js",
					Description: "An event dealing to execute functions in the browser.",
				},
				{
					Name:        toolbelt.ToCasedString("DispatchCustomEvent"),
					Value:       "datastar-dispatch-custom-event",
					Description: "An event dealing with custom events.",
				},
			},
		},
	},
}
